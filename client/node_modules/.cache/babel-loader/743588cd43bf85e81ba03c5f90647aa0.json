{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar lv =\n/** @class */\nfunction () {\n  function lv() {\n    this.observer = new MutationObserver(this.callback);\n  }\n  /**\n   * iterates through all elements and calls function create on them\n   */\n\n\n  lv.prototype.initLoaderAll = function () {\n    var divs = document.getElementsByTagName(\"DIV\");\n\n    for (var i = 0; i < divs.length; i++) {\n      if (!divs[i].hasChildNodes()) {\n        lv.create(divs[i]);\n      }\n    }\n  };\n  /**\n   * returns list of non-main classes (every except the one that specifies the element)\n   * @param classList\n   * @param notIncludingClass\n   */\n\n\n  lv.getModifyingClasses = function (classList, notIncludingClass) {\n    var modifyingClasses = [];\n\n    for (var i = 0; i < classList.length; i++) {\n      if (classList[i] != notIncludingClass) {\n        modifyingClasses.push(classList[i]);\n      }\n    }\n\n    return modifyingClasses;\n  };\n  /**\n   * decides type of passed element and returns its object\n   * @param element - pass existing element or null\n   * @param classString - classes separated with one space that specifies type of element, optional, only when passing null instead of element\n   */\n\n\n  lv.create = function (element, classString) {\n    if (element === void 0) {\n      element = null;\n    }\n\n    var classes = [];\n\n    if (element != null) {\n      var listOfClasses = element.classList;\n\n      for (var i = 0; i < listOfClasses.length; i++) {\n        classes.push(listOfClasses[i]);\n      }\n    } else if (classString != null) {\n      classes = classString.split(\" \");\n    }\n\n    for (var i = 0; i < classes.length; i++) {\n      switch (classes[i]) {\n        case \"lv-bars\":\n          return new lv.Circle(element, lv.CircleType.Bars, lv.getModifyingClasses(classes, \"lv-bars\"));\n\n        case \"lv-squares\":\n          return new lv.Circle(element, lv.CircleType.Squares, lv.getModifyingClasses(classes, \"lv-squares\"));\n\n        case \"lv-circles\":\n          return new lv.Circle(element, lv.CircleType.Circles, lv.getModifyingClasses(classes, \"lv-circles\"));\n\n        case \"lv-dots\":\n          return new lv.Circle(element, lv.CircleType.Dots, lv.getModifyingClasses(classes, \"lv-dots\"));\n\n        case \"lv-spinner\":\n          return new lv.Circle(element, lv.CircleType.Spinner, lv.getModifyingClasses(classes, \"lv-spinner\"));\n\n        case \"lv-dashed\":\n          return new lv.Circle(element, lv.CircleType.Dashed, lv.getModifyingClasses(classes, \"lv-dashed\"));\n\n        case \"lv-determinate_circle\":\n          return new lv.Circle(element, lv.CircleType.DeterminateCircle, lv.getModifyingClasses(classes, \"lv-determinate_circle\"));\n\n        case \"lv-line\":\n          return new lv.Bar(element, lv.BarType.Line, lv.getModifyingClasses(classes, \"lv-line\"));\n\n        case \"lv-bordered_line\":\n          return new lv.Bar(element, lv.BarType.BorderedLine, lv.getModifyingClasses(classes, \"lv-bordered_line\"));\n\n        case \"lv-determinate_line\":\n          return new lv.Bar(element, lv.BarType.DeterminateLine, lv.getModifyingClasses(classes, \"lv-determinate_line\"));\n\n        case \"lv-determinate_bordered_line\":\n          return new lv.Bar(element, lv.BarType.DeterminateBorderedLine, lv.getModifyingClasses(classes, \"lv-determinate_bordered_line\"));\n      }\n    }\n\n    return null;\n  };\n  /**\n   * observes for changes in DOM and creates new element's objects\n   * @param mutationList\n   * @param observer\n   */\n\n\n  lv.prototype.callback = function (mutationList, observer) {\n    for (var i = 0; i < mutationList.length; i++) {\n      if (mutationList[i].type === \"childList\") {\n        try {\n          if (mutationList[i].addedNodes[0].classList.length > 0) {\n            // filling the node with divs when it is empty\n            lv.create(mutationList[i].addedNodes[0]);\n          }\n        } catch (error) {}\n      }\n    }\n  };\n\n  ;\n\n  lv.prototype.startObserving = function () {\n    this.observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  };\n\n  lv.prototype.stopObserving = function () {\n    this.observer.disconnect();\n  };\n\n  return lv;\n}();\n\n(function (lv) {\n  /**\n   * specifies functions same for all elements\n   */\n  var ElementBase =\n  /** @class */\n  function () {\n    function ElementBase(element) {\n      this.element = element === null ? document.createElement('div') : element;\n    }\n\n    ElementBase.prototype.show = function () {\n      this.element.style.display = null;\n    };\n\n    ElementBase.prototype.hide = function () {\n      this.element.style.display = \"none\";\n    };\n\n    ElementBase.prototype.remove = function () {\n      this.element.parentNode.removeChild(this.element);\n    };\n\n    ElementBase.prototype.setLabel = function (labelText) {\n      this.element.setAttribute(\"data-label\", labelText);\n    };\n\n    ElementBase.prototype.removeLabel = function () {\n      this.element.removeAttribute(\"data-label\");\n    };\n\n    ElementBase.prototype.showPercentage = function () {\n      this.element.setAttribute(\"data-percentage\", \"true\");\n    };\n\n    ElementBase.prototype.hidePercentage = function () {\n      this.element.removeAttribute(\"data-percentage\");\n    };\n\n    ElementBase.prototype.setId = function (idText) {\n      this.element.setAttribute(\"id\", idText);\n    };\n\n    ElementBase.prototype.removeId = function () {\n      this.element.removeAttribute(\"id\");\n    };\n    /**\n     * adds class or classes to element\n     * @param classString - string that contains classes separated with one space\n     */\n\n\n    ElementBase.prototype.addClass = function (classString) {\n      var classList = classString.split(\" \");\n\n      for (var i = 0; i < classList.length; i++) {\n        this.element.classList.add(classList[i]);\n      }\n    };\n    /**\n     * if element contains specified class or classes, it/they are removed\n     * @param classString - string that contains classes separated with one space\n     */\n\n\n    ElementBase.prototype.removeClass = function (classString) {\n      var classList = classString.split(\" \");\n\n      for (var i = 0; i < classList.length; i++) {\n        if (this.element.classList.contains(classList[i])) {\n          this.element.classList.remove(classList[i]);\n        }\n      }\n    };\n    /**\n     * returns DOM element - needed for placing or removing the element with jquery\n     */\n\n\n    ElementBase.prototype.getElement = function () {\n      return this.element;\n    };\n    /**\n     * resets determinate element to 0\n     * @param maxValue\n     */\n\n\n    ElementBase.prototype.reset = function (maxValue) {\n      this.update('set', 0, maxValue);\n    };\n    /**\n     * sets determinate element to 100%\n     * @param maxValue\n     */\n\n\n    ElementBase.prototype.fill = function (maxValue) {\n      this.update('set', maxValue, maxValue);\n    };\n    /**\n     * adds positive or negative value to a determinate element\n     * @param addValue\n     * @param maxValue\n     */\n\n\n    ElementBase.prototype.add = function (addValue, maxValue) {\n      this.update('add', addValue, maxValue);\n    };\n    /**\n     * sets loading bar to passed value\n     * @param value\n     * @param maxValue\n     */\n\n\n    ElementBase.prototype.set = function (value, maxValue) {\n      this.update('set', value, maxValue);\n    };\n    /**\n     * initializes an element\n     * @param loaderElement\n     * @param description\n     */\n\n\n    ElementBase.prototype.initLoader = function (loaderElement, description) {\n      // manual addition on specified object\n      if (!loaderElement.hasChildNodes()) {\n        this.fillElement(loaderElement, description.className, description.divCount);\n      }\n    };\n    /**\n     * fills element with appropriate number of divs\n     * @param element\n     * @param elementClass\n     * @param divNumber\n     */\n\n\n    ElementBase.prototype.fillElement = function (element, elementClass, divNumber) {\n      for (var i = 0; i < divNumber; i += 1) {\n        element.appendChild(document.createElement(\"DIV\"));\n      }\n\n      if (elementClass === \"lv-determinate_circle\" || elementClass === \"lv-determinate_line\" || elementClass === \"lv-determinate_bordered_line\") {\n        element.lastElementChild.innerHTML = \"0\";\n      }\n\n      if (!element.classList.contains(elementClass)) {\n        element.classList.add(elementClass);\n      }\n    };\n\n    ;\n    return ElementBase;\n  }();\n\n  lv.ElementBase = ElementBase;\n  /**\n   * class for linear elements\n   */\n\n  var Bar =\n  /** @class */\n  function (_super) {\n    __extends(Bar, _super);\n    /**\n     * creates linear element\n     * @param element\n     * @param barType\n     * @param classes\n     */\n\n\n    function Bar(element, barType, classes) {\n      if (classes === void 0) {\n        classes = null;\n      }\n\n      var _this = _super.call(this, element) || this;\n\n      _this.divCount = {};\n      _this.divCount[BarType.Line] = {\n        className: \"lv-line\",\n        divCount: 1\n      };\n      _this.divCount[BarType.BorderedLine] = {\n        className: \"lv-bordered_line\",\n        divCount: 1\n      };\n      _this.divCount[BarType.DeterminateLine] = {\n        className: \"lv-determinate_line\",\n        divCount: 2\n      };\n      _this.divCount[BarType.DeterminateBorderedLine] = {\n        className: \"lv-determinate_bordered_line\",\n        divCount: 2\n      };\n\n      _this.initLoader(_this.element, _this.divCount[barType]);\n\n      for (var i = 0; i < classes.length; i++) {\n        _this.element.classList.add(classes[i]);\n      }\n\n      return _this;\n    }\n    /**\n     * type specific update function for linear element\n     * @param type\n     * @param newValue\n     * @param maxValue\n     */\n\n\n    Bar.prototype.update = function (type, newValue, maxValue) {\n      // getting current width of line from the page\n      var line = this.element.firstElementChild;\n      var percentage = this.element.lastElementChild;\n      var currentWidth = parseFloat(line.style.width); // protective condition for empty line\n\n      if (isNaN(currentWidth)) {\n        currentWidth = 0;\n      } // end point of the animation\n\n\n      var goalWidth;\n\n      if (type === \"add\") {\n        goalWidth = currentWidth + Math.round(newValue / maxValue * 1000) / 10;\n      } else if (type === \"set\") {\n        goalWidth = Math.round(newValue / maxValue * 1000) / 10;\n      } // prevent overflow from both sides\n\n\n      if (goalWidth > 100) {\n        goalWidth = 100.0;\n      }\n\n      if (goalWidth < 0) {\n        goalWidth = 0;\n      }\n\n      var animation = setInterval(frame, 5);\n\n      function frame() {\n        if (currentWidth > goalWidth) {\n          // shortening the line\n          if (currentWidth < goalWidth + 0.01) {\n            clearInterval(animation);\n          } else {\n            currentWidth -= 0.1;\n          }\n        } else {\n          // extending the line\n          if (currentWidth > goalWidth - 0.01) {\n            clearInterval(animation);\n          } else {\n            currentWidth += 0.1;\n          }\n        }\n\n        line.style.width = currentWidth + \"%\"; // updating the percentage\n\n        percentage.innerHTML = currentWidth.toFixed(1);\n      }\n    };\n\n    return Bar;\n  }(ElementBase);\n\n  lv.Bar = Bar;\n  /**\n   * class for square or circular elements\n   */\n\n  var Circle =\n  /** @class */\n  function (_super) {\n    __extends(Circle, _super);\n    /**\n     * creates square or circular element\n     * @param element\n     * @param circleType\n     * @param classes\n     */\n\n\n    function Circle(element, circleType, classes) {\n      if (classes === void 0) {\n        classes = null;\n      }\n\n      var _this = _super.call(this, element) || this;\n\n      _this.divCount = {};\n      _this.divCount[CircleType.Bars] = {\n        className: \"lv-bars\",\n        divCount: 8\n      };\n      _this.divCount[CircleType.Squares] = {\n        className: \"lv-squares\",\n        divCount: 4\n      };\n      _this.divCount[CircleType.Circles] = {\n        className: \"lv-circles\",\n        divCount: 12\n      };\n      _this.divCount[CircleType.Dots] = {\n        className: \"lv-dots\",\n        divCount: 4\n      };\n      _this.divCount[CircleType.DeterminateCircle] = {\n        className: \"lv-determinate_circle\",\n        divCount: 4\n      };\n      _this.divCount[CircleType.Spinner] = {\n        className: \"lv-spinner\",\n        divCount: 1\n      };\n      _this.divCount[CircleType.Dashed] = {\n        className: \"lv-dashed\",\n        divCount: 1\n      };\n\n      _this.initLoader(_this.element, _this.divCount[circleType]);\n\n      for (var i = 0; i < classes.length; i++) {\n        _this.element.classList.add(classes[i]);\n      }\n\n      return _this;\n    }\n    /**\n     * type specific update function for non-linear elements\n     * @param type\n     * @param newValue\n     * @param maxValue\n     */\n\n\n    Circle.prototype.update = function (type, newValue, maxValue) {\n      var rotationOffset = -45; // initial rotation of the spinning div in css\n      // separating individual parts of the circle\n\n      var background = this.element.children[0];\n      var overlay = this.element.children[1];\n      var spinner = this.element.children[2];\n      var percentage = this.element.children[3]; // getting the colors defined in css\n\n      var backgroundColor = window.getComputedStyle(background).borderTopColor;\n      var spinnerColor = window.getComputedStyle(spinner).borderTopColor; // computing current rotation of spinning part of circle using rotation matrix\n\n      var rotationMatrix = window.getComputedStyle(spinner).getPropertyValue(\"transform\").split(\"(\")[1].split(\")\")[0].split(\",\");\n      var currentAngle = Math.round(Math.atan2(parseFloat(rotationMatrix[1]), parseFloat(rotationMatrix[0])) * (180 / Math.PI)) - rotationOffset; // safety conditions for full and empty circle (360 <=> 0 and that caused problems)\n\n      if (percentage.innerHTML === \"100\") {\n        currentAngle = 360;\n      }\n\n      if (currentAngle < 0) {\n        currentAngle += 360;\n      } // end point of the animation\n\n\n      var goalAngle;\n\n      if (type === \"add\") {\n        goalAngle = currentAngle + Math.round(newValue / maxValue * 360);\n      } else if (type === \"set\") {\n        goalAngle = Math.round(newValue / maxValue * 360);\n      } // prevent overflow to both sides\n\n\n      if (goalAngle > 360) {\n        goalAngle = 360;\n      }\n\n      if (goalAngle < 0) {\n        goalAngle = 0;\n      }\n\n      var id = setInterval(frame, 3);\n\n      function frame() {\n        if (currentAngle === goalAngle) {\n          // stopping the animation when end point is reached\n          clearInterval(id);\n        } else {\n          if (currentAngle < goalAngle) {\n            // \"filling\" the circle\n            if (currentAngle === 90) {\n              background.style.borderRightColor = spinnerColor;\n              overlay.style.borderTopColor = \"transparent\";\n            } else if (currentAngle === 180) {\n              background.style.borderBottomColor = spinnerColor;\n            } else if (currentAngle === 270) {\n              background.style.borderLeftColor = spinnerColor;\n            }\n\n            currentAngle += 1;\n          } else {\n            // \"emptying the circle\"\n            if (currentAngle === 270) {\n              background.style.borderLeftColor = backgroundColor;\n            } else if (currentAngle === 180) {\n              background.style.borderBottomColor = backgroundColor;\n            } else if (currentAngle === 90) {\n              background.style.borderRightColor = backgroundColor;\n              overlay.style.borderTopColor = backgroundColor;\n            }\n\n            currentAngle -= 1;\n          } // rotating the circle\n\n\n          spinner.style.transform = \"rotate(\" + (rotationOffset + currentAngle).toString() + \"deg)\"; // updating percentage\n\n          percentage.innerHTML = Math.round(currentAngle / 360 * 100).toString();\n        }\n      }\n    };\n\n    return Circle;\n  }(ElementBase);\n\n  lv.Circle = Circle;\n  /**\n   * list of linear elements\n   */\n\n  var BarType;\n\n  (function (BarType) {\n    BarType[BarType[\"Line\"] = 0] = \"Line\";\n    BarType[BarType[\"BorderedLine\"] = 1] = \"BorderedLine\";\n    BarType[BarType[\"DeterminateLine\"] = 2] = \"DeterminateLine\";\n    BarType[BarType[\"DeterminateBorderedLine\"] = 3] = \"DeterminateBorderedLine\";\n  })(BarType = lv.BarType || (lv.BarType = {}));\n  /**\n   * list of non-linear elements\n   */\n\n\n  var CircleType;\n\n  (function (CircleType) {\n    CircleType[CircleType[\"Bars\"] = 0] = \"Bars\";\n    CircleType[CircleType[\"Squares\"] = 1] = \"Squares\";\n    CircleType[CircleType[\"Circles\"] = 2] = \"Circles\";\n    CircleType[CircleType[\"Dots\"] = 3] = \"Dots\";\n    CircleType[CircleType[\"DeterminateCircle\"] = 4] = \"DeterminateCircle\";\n    CircleType[CircleType[\"Spinner\"] = 5] = \"Spinner\";\n    CircleType[CircleType[\"Dashed\"] = 6] = \"Dashed\";\n  })(CircleType = lv.CircleType || (lv.CircleType = {}));\n})(lv || (lv = {}));","map":{"version":3,"sources":["main.ts"],"names":[],"mappings":"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","sourcesContent":["class lv {\r\n    /**\r\n     * iterates through all elements and calls function create on them\r\n     */\r\n    public initLoaderAll(): void {\r\n        let divs = document.getElementsByTagName(\"DIV\");\r\n        for (let i = 0; i < divs.length; i++) {\r\n            if (!divs[i].hasChildNodes()) {\r\n                lv.create(<HTMLDivElement>divs[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * returns list of non-main classes (every except the one that specifies the element)\r\n     * @param classList\r\n     * @param notIncludingClass\r\n     */\r\n    private static getModifyingClasses(classList: Array<string>, notIncludingClass: string): string[] {\r\n        let modifyingClasses: string[] = [];\r\n        for (let i = 0; i < classList.length; i++) {\r\n            if (classList[i] != notIncludingClass) {\r\n                modifyingClasses.push(classList[i]);\r\n            }\r\n        }\r\n        return modifyingClasses;\r\n    }\r\n\r\n    /**\r\n     * decides type of passed element and returns its object\r\n     * @param element - pass existing element or null\r\n     * @param classString - classes separated with one space that specifies type of element, optional, only when passing null instead of element\r\n     */\r\n    public static create(element: HTMLDivElement = null, classString?: string): lv.ElementBase {\r\n        let classes : Array<string> = [];\r\n        if (element != null) {\r\n            let listOfClasses = element.classList;\r\n            for (let i = 0; i < listOfClasses.length; i++) {\r\n                classes.push(listOfClasses[i]);\r\n            }\r\n        } else if (classString != null) {\r\n            classes = classString.split(\" \");\r\n        }\r\n        for (let i = 0; i < classes.length; i++) {\r\n            switch (classes[i]) {\r\n                case \"lv-bars\":\r\n                    return new lv.Circle(element, lv.CircleType.Bars, lv.getModifyingClasses(classes, \"lv-bars\"));\r\n                case \"lv-squares\":\r\n                    return new lv.Circle(element, lv.CircleType.Squares, lv.getModifyingClasses(classes, \"lv-squares\"));\r\n                case \"lv-circles\":\r\n                    return new lv.Circle(element, lv.CircleType.Circles, lv.getModifyingClasses(classes, \"lv-circles\"));\r\n                case \"lv-dots\":\r\n                    return new lv.Circle(element, lv.CircleType.Dots, lv.getModifyingClasses(classes, \"lv-dots\"));\r\n                case \"lv-spinner\":\r\n                    return new lv.Circle(element, lv.CircleType.Spinner, lv.getModifyingClasses(classes, \"lv-spinner\"));\r\n                case \"lv-dashed\":\r\n                    return new lv.Circle(element, lv.CircleType.Dashed, lv.getModifyingClasses(classes, \"lv-dashed\"));\r\n                case \"lv-determinate_circle\":\r\n                    return new lv.Circle(element, lv.CircleType.DeterminateCircle, lv.getModifyingClasses(classes, \"lv-determinate_circle\"));\r\n                case \"lv-line\":\r\n                    return new lv.Bar(element, lv.BarType.Line, lv.getModifyingClasses(classes, \"lv-line\"));\r\n                case \"lv-bordered_line\":\r\n                    return new lv.Bar(element, lv.BarType.BorderedLine, lv.getModifyingClasses(classes, \"lv-bordered_line\"));\r\n                case \"lv-determinate_line\":\r\n                    return new lv.Bar(element, lv.BarType.DeterminateLine, lv.getModifyingClasses(classes, \"lv-determinate_line\"));\r\n                case \"lv-determinate_bordered_line\":\r\n                    return new lv.Bar(element, lv.BarType.DeterminateBorderedLine, lv.getModifyingClasses(classes, \"lv-determinate_bordered_line\"));\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * observes for changes in DOM and creates new element's objects\r\n     * @param mutationList\r\n     * @param observer\r\n     */\r\n    private callback(mutationList, observer: MutationObserver): void {\r\n        for (let i = 0; i < mutationList.length; i++) {\r\n            if (mutationList[i].type === \"childList\") {\r\n                try {\r\n                    if (mutationList[i].addedNodes[0].classList.length > 0) {\r\n                        // filling the node with divs when it is empty\r\n                        lv.create(mutationList[i].addedNodes[0]);\r\n                    }\r\n                } catch (error) {}\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * initializing the observer and starting observation\r\n     */\r\n    private observer: MutationObserver;\r\n    constructor() {\r\n        this.observer = new MutationObserver(this.callback);\r\n    }\r\n    public startObserving() {\r\n        this.observer.observe(document.body, {childList: true, subtree: true});\r\n    }\r\n    public stopObserving() {\r\n        this.observer.disconnect();\r\n    }\r\n}\r\nnamespace lv {\r\n    interface IDictionary {\r\n        [key: number]: IDescription;\r\n    }\r\n    interface IDescription {\r\n        divCount: number;\r\n        className: string;\r\n    }\r\n\r\n    /**\r\n     * specifies functions same for all elements\r\n     */\r\n    export abstract class ElementBase {\r\n        \r\n        protected element: HTMLDivElement;\r\n        \r\n        constructor(element: HTMLDivElement) {\r\n            this.element = element === null ? document.createElement('div') : element;\r\n        }\r\n\r\n        public show(): void {\r\n            this.element.style.display = null;\r\n        }\r\n\r\n        public hide(): void {\r\n            this.element.style.display = \"none\";\r\n        }\r\n\r\n        public remove(): void {\r\n            this.element.parentNode.removeChild(this.element);\r\n        }\r\n\r\n        public setLabel(labelText: string): void {\r\n            this.element.setAttribute(\"data-label\", labelText);\r\n        }\r\n\r\n        public removeLabel(): void {\r\n            this.element.removeAttribute(\"data-label\");\r\n        }\r\n\r\n        public showPercentage(): void {\r\n            this.element.setAttribute(\"data-percentage\", \"true\");\r\n        }\r\n\r\n        public hidePercentage(): void {\r\n            this.element.removeAttribute(\"data-percentage\");\r\n        }\r\n\r\n        public setId(idText: string): void {\r\n            this.element.setAttribute(\"id\", idText);\r\n        }\r\n\r\n        public removeId(): void {\r\n            this.element.removeAttribute(\"id\");\r\n        }\r\n\r\n        /**\r\n         * adds class or classes to element\r\n         * @param classString - string that contains classes separated with one space\r\n         */\r\n        public addClass(classString: string): void {\r\n            let classList = classString.split(\" \");\r\n            for (let i = 0; i < classList.length; i++) {\r\n                this.element.classList.add(classList[i]);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * if element contains specified class or classes, it/they are removed\r\n         * @param classString - string that contains classes separated with one space\r\n         */\r\n        public removeClass(classString: string): void {\r\n            let classList = classString.split(\" \");\r\n            for (let i = 0; i < classList.length; i++) {\r\n                if (this.element.classList.contains(classList[i])) {\r\n                    this.element.classList.remove(classList[i]);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * returns DOM element - needed for placing or removing the element with jquery\r\n         */\r\n        public getElement(): HTMLDivElement {\r\n            return this.element;\r\n        }\r\n\r\n        /**\r\n         * updates determinate element\r\n         * @param type\r\n         * @param newValue\r\n         * @param maxValue\r\n         */\r\n        public abstract update(type: string, newValue: number, maxValue: number): void;\r\n\r\n        /**\r\n         * resets determinate element to 0\r\n         * @param maxValue\r\n         */\r\n        public reset(maxValue: number): void {\r\n                this.update('set', 0, maxValue);\r\n        }\r\n\r\n        /**\r\n         * sets determinate element to 100%\r\n         * @param maxValue\r\n         */\r\n        public fill(maxValue: number): void {\r\n                this.update('set', maxValue, maxValue);\r\n        }\r\n\r\n        /**\r\n         * adds positive or negative value to a determinate element\r\n         * @param addValue\r\n         * @param maxValue\r\n         */\r\n        public add(addValue: number, maxValue: number): void {\r\n                this.update('add', addValue, maxValue);\r\n        }\r\n\r\n        /**\r\n         * sets loading bar to passed value\r\n         * @param value\r\n         * @param maxValue\r\n         */\r\n        public set(value: number, maxValue: number): void {\r\n                this.update('set', value, maxValue);\r\n        }\r\n\r\n        /**\r\n         * initializes an element\r\n         * @param loaderElement\r\n         * @param description\r\n         */\r\n        public initLoader(loaderElement: HTMLDivElement, description: IDescription): void {\r\n            // manual addition on specified object\r\n            if (!loaderElement.hasChildNodes()) {\r\n                this.fillElement(loaderElement, description.className, description.divCount);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * fills element with appropriate number of divs\r\n         * @param element\r\n         * @param elementClass\r\n         * @param divNumber\r\n         */\r\n        private fillElement(element: HTMLElement, elementClass: string, divNumber: number): void {\r\n            for (let i = 0; i < divNumber; i += 1) {\r\n                element.appendChild(document.createElement(\"DIV\"));\r\n            }\r\n            if (elementClass === \"lv-determinate_circle\" || elementClass === \"lv-determinate_line\" || elementClass === \"lv-determinate_bordered_line\") {\r\n                element.lastElementChild.innerHTML = \"0\";\r\n            }\r\n            if (!element.classList.contains(elementClass)) {\r\n                element.classList.add(elementClass);\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * class for linear elements\r\n     */\r\n    export class Bar extends ElementBase {\r\n        private divCount: IDictionary = {};\r\n\r\n        /**\r\n         * creates linear element\r\n         * @param element\r\n         * @param barType\r\n         * @param classes\r\n         */\r\n        constructor(element: HTMLDivElement, barType: BarType, classes: string[] = null) {\r\n            super(element);\r\n            this.divCount[BarType.Line] = {className: \"lv-line\", divCount: 1};\r\n            this.divCount[BarType.BorderedLine] = {className: \"lv-bordered_line\", divCount: 1};\r\n            this.divCount[BarType.DeterminateLine] = {className: \"lv-determinate_line\", divCount: 2};\r\n            this.divCount[BarType.DeterminateBorderedLine] = {className: \"lv-determinate_bordered_line\", divCount: 2};\r\n            this.initLoader(this.element, this.divCount[barType]);\r\n            for (let i = 0; i < classes.length; i++) {\r\n                this.element.classList.add(classes[i]);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * type specific update function for linear element\r\n         * @param type\r\n         * @param newValue\r\n         * @param maxValue\r\n         */\r\n        update(type: string, newValue: number, maxValue: number): void {\r\n            // getting current width of line from the page\r\n            let line: HTMLDivElement = <HTMLDivElement>this.element.firstElementChild;\r\n            let percentage: HTMLDivElement = <HTMLDivElement>this.element.lastElementChild;\r\n            let currentWidth: number = parseFloat(line.style.width);\r\n            // protective condition for empty line\r\n            if (isNaN(currentWidth)) {\r\n                currentWidth = 0;\r\n            }\r\n            // end point of the animation\r\n            let goalWidth: number;\r\n            if (type === \"add\") {\r\n                goalWidth = currentWidth + Math.round((newValue / maxValue) * 1000) / 10;\r\n            } else if (type === \"set\") {\r\n                goalWidth = Math.round((newValue / maxValue) * 1000) / 10;\r\n            }\r\n            // prevent overflow from both sides\r\n            if (goalWidth > 100) {\r\n                goalWidth = 100.0;\r\n            }\r\n            if (goalWidth < 0) {\r\n                goalWidth = 0;\r\n            }\r\n            let animation = setInterval(frame, 5);\r\n            function frame() {\r\n                if (currentWidth > goalWidth) { // shortening the line\r\n                    if (currentWidth < goalWidth + 0.01) {\r\n                        clearInterval(animation);\r\n                    } else {\r\n                        currentWidth -= 0.1;\r\n                    }\r\n                } else { // extending the line\r\n                    if (currentWidth > goalWidth - 0.01) {\r\n                        clearInterval(animation);\r\n                    } else {\r\n                        currentWidth += 0.1;\r\n                    }\r\n                }\r\n                line.style.width = currentWidth + \"%\";\r\n                // updating the percentage\r\n                percentage.innerHTML = currentWidth.toFixed(1);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * class for square or circular elements\r\n     */\r\n    export class Circle extends ElementBase {\r\n\r\n        private divCount: IDictionary = {};\r\n\r\n        /**\r\n         * creates square or circular element\r\n         * @param element\r\n         * @param circleType\r\n         * @param classes\r\n         */\r\n        constructor(element: HTMLDivElement, circleType: CircleType, classes: string[] = null) {\r\n            super(element);\r\n            this.divCount[CircleType.Bars] = {className: \"lv-bars\", divCount: 8};\r\n            this.divCount[CircleType.Squares] = {className: \"lv-squares\", divCount: 4};\r\n            this.divCount[CircleType.Circles] = {className: \"lv-circles\", divCount: 12};\r\n            this.divCount[CircleType.Dots] = {className: \"lv-dots\", divCount: 4};\r\n            this.divCount[CircleType.DeterminateCircle] = {className: \"lv-determinate_circle\", divCount: 4};\r\n            this.divCount[CircleType.Spinner] = {className: \"lv-spinner\", divCount: 1};\r\n            this.divCount[CircleType.Dashed] = {className: \"lv-dashed\", divCount: 1};\r\n            this.initLoader(this.element, this.divCount[circleType]);\r\n            for (let i = 0; i < classes.length; i++) {\r\n                this.element.classList.add(classes[i]);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * type specific update function for non-linear elements\r\n         * @param type\r\n         * @param newValue\r\n         * @param maxValue\r\n         */\r\n        update(type: string, newValue: number, maxValue: number): void {\r\n            let rotationOffset: number = -45; // initial rotation of the spinning div in css\r\n            // separating individual parts of the circle\r\n            let background: HTMLDivElement = <HTMLDivElement>this.element.children[0];\r\n            let overlay: HTMLDivElement = <HTMLDivElement>this.element.children[1];\r\n            let spinner: HTMLDivElement = <HTMLDivElement>this.element.children[2];\r\n            let percentage: HTMLDivElement = <HTMLDivElement>this.element.children[3];\r\n            // getting the colors defined in css\r\n            let backgroundColor: string = window.getComputedStyle(background).borderTopColor;\r\n            let spinnerColor: string = window.getComputedStyle(spinner).borderTopColor;\r\n            // computing current rotation of spinning part of circle using rotation matrix\r\n            let rotationMatrix = window.getComputedStyle(spinner).getPropertyValue(\"transform\").split(\"(\")[1].split(\")\")[0].split(\",\");\r\n            let currentAngle: number = Math.round(Math.atan2(parseFloat(rotationMatrix[1]), parseFloat(rotationMatrix[0])) * (180 / Math.PI)) - rotationOffset;\r\n            // safety conditions for full and empty circle (360 <=> 0 and that caused problems)\r\n            if (percentage.innerHTML === \"100\") {\r\n                currentAngle = 360;\r\n            }\r\n            if (currentAngle < 0) {\r\n                currentAngle += 360;\r\n            }\r\n            // end point of the animation\r\n            let goalAngle: number;\r\n            if (type === \"add\") {\r\n                goalAngle = currentAngle + Math.round((newValue / maxValue) * 360);\r\n            } else if (type === \"set\") {\r\n                goalAngle = Math.round((newValue / maxValue) * 360);\r\n            }\r\n            // prevent overflow to both sides\r\n            if (goalAngle > 360) {\r\n                goalAngle = 360;\r\n            }\r\n            if (goalAngle < 0) {\r\n                goalAngle = 0;\r\n            }\r\n            let id = setInterval(frame, 3);\r\n            function frame() {\r\n                if (currentAngle === goalAngle) { // stopping the animation when end point is reached\r\n                    clearInterval(id);\r\n                } else {\r\n                    if (currentAngle < goalAngle) { // \"filling\" the circle\r\n                        if (currentAngle === 90) {\r\n                            background.style.borderRightColor = spinnerColor;\r\n                            overlay.style.borderTopColor = \"transparent\";\r\n                        } else if (currentAngle === 180) {\r\n                            background.style.borderBottomColor = spinnerColor;\r\n                        } else if (currentAngle === 270) {\r\n                            background.style.borderLeftColor = spinnerColor;\r\n                        }\r\n                        currentAngle += 1;\r\n                    } else { // \"emptying the circle\"\r\n                        if (currentAngle === 270) {\r\n                            background.style.borderLeftColor = backgroundColor;\r\n                        } else if (currentAngle === 180) {\r\n                            background.style.borderBottomColor = backgroundColor;\r\n                        } else if (currentAngle === 90) {\r\n                            background.style.borderRightColor = backgroundColor;\r\n                            overlay.style.borderTopColor = backgroundColor;\r\n                        }\r\n                        currentAngle -= 1;\r\n                    }\r\n                    // rotating the circle\r\n                    spinner.style.transform = \"rotate(\" + (rotationOffset + currentAngle).toString() + \"deg)\";\r\n                    // updating percentage\r\n                    percentage.innerHTML = (Math.round((currentAngle / 360) * 100)).toString();\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * list of linear elements\r\n     */\r\n    export enum BarType {\r\n        Line,\r\n        BorderedLine,\r\n        DeterminateLine,\r\n        DeterminateBorderedLine,\r\n    }\r\n\r\n    /**\r\n     * list of non-linear elements\r\n     */\r\n    export enum CircleType {\r\n        Bars,\r\n        Squares,\r\n        Circles,\r\n        Dots,\r\n        DeterminateCircle,\r\n        Spinner,\r\n        Dashed,\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}