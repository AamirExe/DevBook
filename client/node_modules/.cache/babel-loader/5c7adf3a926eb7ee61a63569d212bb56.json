{"ast":null,"code":"import axios from 'axios';\nimport { REGISTER_SUCCESS, REGISTER_FAILURE, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAILURE } from './actions';\nimport { setAlert } from './alert';\nimport setAuthToken from '../helpers/setAuthToken'; // Load user \n\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) setAuthToken(localStorage.token);\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  console.log(\"IN register REducer\");\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    console.log(\"IN register Error \");\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAILURE\n    });\n  }\n}; // Login User\n\nexport const login = (email, password) => async dispatch => {\n  console.log(\"IN Login REducer\");\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    console.log(res);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAILURE\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Aamir/Desktop/porject/MernStack/client/src/actions.js/auth.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAILURE","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAILURE","setAlert","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","console","log","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\n\r\nimport {\r\n    REGISTER_SUCCESS ,\r\n    REGISTER_FAILURE,\r\n    USER_LOADED,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAILURE\r\n} from './actions'\r\n\r\nimport {setAlert} from './alert'\r\nimport setAuthToken from '../helpers/setAuthToken'\r\n\r\n// Load user \r\nexport const loadUser = () => async dispatch => {\r\n    if(localStorage.token)\r\n    setAuthToken(localStorage.token)\r\n\r\n    try {\r\n        const res = await axios.get('/api/auth')\r\n        dispatch({\r\n            type:USER_LOADED,\r\n            payload: res.data\r\n        })\r\n    } catch (err) {\r\n        dispatch({\r\n            type:AUTH_ERROR\r\n        })        \r\n    }\r\n}\r\n\r\n\r\n// Register User\r\n\r\nexport const register = ({name,email,password}) => async dispatch => {\r\n    console.log(\"IN register REducer\")\r\n    const config = {\r\n\r\n       headers : {\r\n        'Content-Type' : 'application/json'\r\n       } \r\n    }\r\n\r\n    const body = JSON.stringify({name,email,password});\r\n\r\n    try {\r\n        const res = await axios.post('/api/users',body,config)\r\n     \r\n    \r\n        dispatch({\r\n            type:REGISTER_SUCCESS,\r\n            payload:res.data\r\n        })\r\n        \r\n        dispatch(loadUser());\r\n        \r\n    } catch (err) {\r\n        console.log(\"IN register Error \")\r\n        const errors = err.response.data.errors\r\n        \r\n        if(errors){\r\n            errors.forEach(error => dispatch(setAlert(error.msg,'danger')) )\r\n        }\r\n        dispatch({\r\n            type:REGISTER_FAILURE\r\n        })        \r\n    }\r\n\r\n}\r\n\r\n// Login User\r\nexport const login = (email,password) => async dispatch => {\r\n    console.log(\"IN Login REducer\")\r\n    const config = {\r\n\r\n       headers : {\r\n        'Content-Type' : 'application/json'\r\n       } \r\n    }\r\n\r\n    const body = JSON.stringify({email,password});\r\n\r\n    try {\r\n        const res = await axios.post('/api/auth',body,config)\r\n        console.log(res)\r\n     \r\n    \r\n        dispatch({\r\n            type:LOGIN_SUCCESS,\r\n            payload:res.data\r\n        })\r\n        dispatch(loadUser());\r\n    \r\n    } catch (err) {\r\n        \r\n        const errors = err.response.data.errors\r\n        \r\n        if(errors){\r\n            errors.forEach(error => dispatch(setAlert(error.msg,'danger')) )\r\n        }\r\n        dispatch({\r\n            type:LOGIN_FAILURE\r\n        })        \r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}