{"ast":null,"code":"import React, { Profiler } from 'react';\nimport axios from 'axios';\nimport { GET_PROFILE, PROFILE_ERROR, UPDATE_PROFILE } from './actions';\nimport { setAlert } from './alert';\nexport const getCurrentPofile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Create Profile \n\nexport const createProfile = (formData, history, edit) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formData);\n    const res = await axios.post('/api/profile', body, config);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'));\n\n    if (!edit) {\n      history.push('/dashboard');\n    }\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setAlert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add experience \n\nexport const addExperience = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formData);\n    const res = await axios.put('/api/profile/experience', body, config);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Experience Updated', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setAlert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add education \n\nexport const addEducation = (formData, history) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formData);\n    const res = await axios.put('/api/profile/education', body, config);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Education Updated', 'success'));\n    history.push('/dashboard');\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => {\n        dispatch(setAlert(error.msg, 'danger'));\n      });\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete Experience \n\nexport const deletExperience = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/profile/experience/${id}`);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Experience Removed', 'dangers'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete Education \n\nexport const deleteEducation = id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/profile/Education/${id}`);\n    dispatch({\n      type: UPDATE_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert('Education Removed', 'dangers'));\n  } catch (err) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Aamir/Desktop/porject/MernStack/client/src/actions.js/profile.js"],"names":["React","Profiler","axios","GET_PROFILE","PROFILE_ERROR","UPDATE_PROFILE","setAlert","getCurrentPofile","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","createProfile","formData","history","edit","config","headers","body","JSON","stringify","post","push","errors","forEach","error","addExperience","put","addEducation","deletExperience","id","delete","deleteEducation"],"mappings":"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","sourcesContent":["import React, { Profiler } from 'react'\r\n\r\nimport axios from 'axios'\r\n\r\nimport {\r\n    GET_PROFILE,\r\n    PROFILE_ERROR,\r\n    UPDATE_PROFILE\r\n} from './actions'\r\nimport { setAlert } from './alert'\r\n\r\n\r\nexport const getCurrentPofile = () => async dispatch =>  {\r\n    try {\r\n        const res = await axios.get('/api/profile/me')       \r\n        \r\n        dispatch({\r\n            type:GET_PROFILE,\r\n            payload:res.data\r\n        })\r\n    \r\n    } catch (err) {\r\n        dispatch({\r\n            type:PROFILE_ERROR,\r\n            payload:{msg: err.response.statusText,status:err.response.status}\r\n        })        \r\n    }\r\n\r\n}\r\n\r\n\r\n// Create Profile \r\n\r\n\r\nexport const createProfile = (formData,history,edit) => async dispatch => {\r\n    try {\r\n        const config = {\r\n            headers:{\r\n                'Content-Type' : 'application/json'\r\n            }\r\n        }\r\n\r\n        const body = JSON.stringify(formData)\r\n\r\n        const res = await axios.post('/api/profile', body,config)\r\n\r\n        dispatch({\r\n            type:GET_PROFILE,\r\n            payload:res.data\r\n        })        \r\n\r\n        dispatch(setAlert(edit ? 'Profile Updated':'Profile Created' , 'success'))\r\n        \r\n        if(!edit){\r\n            history.push('/dashboard')\r\n        }\r\n       \r\n        \r\n    } catch (err) {\r\n        \r\n        const errors = err.response.data.errors\r\n\r\n        if(errors){\r\n            errors.forEach(error => {\r\n                dispatch(setAlert(error.msg,'danger'))\r\n            });\r\n        }\r\n\r\n        dispatch({\r\n            type:PROFILE_ERROR,\r\n            payload:{msg: err.response.statusText,status:err.response.status}\r\n        })       \r\n    }\r\n}\r\n\r\n// Add experience \r\n\r\nexport const addExperience = (formData,history ) => async dispatch => {\r\n\r\n    try {\r\n        const config = {\r\n            headers:{\r\n                'Content-Type' : 'application/json'\r\n            }\r\n        }\r\n\r\n        const body = JSON.stringify(formData)\r\n\r\n        const res = await axios.put('/api/profile/experience', body,config)\r\n\r\n        dispatch({\r\n            type:UPDATE_PROFILE,\r\n            payload:res.data\r\n        })        \r\n\r\n        dispatch(setAlert('Experience Updated' , 'success'))\r\n          history.push('/dashboard')\r\n        \r\n       \r\n        \r\n    } catch (err) {\r\n        \r\n        const errors = err.response.data.errors\r\n\r\n        if(errors){\r\n            errors.forEach(error => {\r\n                dispatch(setAlert(error.msg,'danger'))\r\n            });\r\n        }\r\n\r\n        dispatch({\r\n            type:PROFILE_ERROR,\r\n            payload:{msg: err.response.statusText,status:err.response.status}\r\n        })       \r\n    }\r\n\r\n}\r\n\r\n\r\n// Add education \r\n\r\nexport const addEducation = (formData,history) => async dispatch => {\r\n    try {\r\n        const config = {\r\n            headers:{\r\n                'Content-Type' : 'application/json'\r\n            }\r\n        }\r\n\r\n        const body = JSON.stringify(formData)\r\n\r\n        const res = await axios.put('/api/profile/education', body,config)\r\n\r\n        dispatch({\r\n            type:UPDATE_PROFILE,\r\n            payload:res.data\r\n        })        \r\n\r\n        dispatch(setAlert('Education Updated' , 'success'))\r\n          history.push('/dashboard')\r\n        \r\n       \r\n        \r\n    } catch (err) {\r\n        \r\n        const errors = err.response.data.errors\r\n\r\n        if(errors){\r\n            errors.forEach(error => {\r\n                dispatch(setAlert(error.msg,'danger'))\r\n            });\r\n        }\r\n\r\n        dispatch({\r\n            type:PROFILE_ERROR,\r\n            payload:{msg: err.response.statusText,status:err.response.status}\r\n        })       \r\n    }\r\n}\r\n\r\n\r\n// Delete Experience \r\n\r\nexport const deletExperience = id => async dispatch =>  {\r\n    try {\r\n        const res = await axios.delete(`/api/profile/experience/${id}`)\r\n        dispatch({\r\n            type:UPDATE_PROFILE,\r\n            payload:res.data\r\n        })\r\n        dispatch(setAlert('Experience Removed' , 'dangers'))\r\n\r\n    } catch (err) {\r\n           \r\n        dispatch({\r\n            type:PROFILE_ERROR,\r\n            payload:{msg: err.response.statusText,status:err.response.status}\r\n        })       \r\n    }\r\n}\r\n\r\n// Delete Education \r\n\r\nexport const deleteEducation = id => async dispatch =>  {\r\n    try {\r\n        const res = await axios.delete(`/api/profile/Education/${id}`)\r\n        dispatch({\r\n            type:UPDATE_PROFILE,\r\n            payload:res.data\r\n        })\r\n        dispatch(setAlert('Education Removed' , 'dangers'))\r\n\r\n    } catch (err) {\r\n           \r\n        dispatch({\r\n            type:PROFILE_ERROR,\r\n            payload:{msg: err.response.statusText,status:err.response.status}\r\n        })       \r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}