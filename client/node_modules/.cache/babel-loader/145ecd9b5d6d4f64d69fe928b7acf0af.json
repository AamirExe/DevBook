{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_POST, ADD_POST, POST_ERROR, UPDATE_LIKES, DELETE_POST, GET_SINGLE_POST, ADD_COMMENT, REMOVE_COMMENT } from './actions'; // Get ALl post \n\nexport const getPost = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/posts');\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add Like \n\nexport const addLike = post_id => async dispatch => {\n  try {\n    console.log(post_id);\n    const res = await axios.put(`/api/posts/likes/${post_id}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id: post_id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Remove Like \n\nexport const removeLike = post_id => async dispatch => {\n  try {\n    const res = await axios.put(`/api/posts/unlikes/${post_id}`);\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id: post_id,\n        likes: res.data\n      }\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Delete Post \n\nexport const deletePost = post_id => async dispatch => {\n  try {\n    const res = await axios.delete(`/api/posts/${post_id}`);\n    dispatch({\n      type: DELETE_POST,\n      payload: {\n        id: post_id\n      }\n    });\n    dispatch(setAlert('Post removed', 'success'));\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};\nexport const addPost = formData => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formData);\n    const res = await axios.post(`/api/posts`, body, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // GET SINGLE POST \n\nexport const getSinglePost = id => async dispatch => {\n  try {\n    const res = await axios.get(`/api/posts/${id}`);\n    dispatch({\n      type: GET_SINGLE_POST,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Add commend \n\nexport const addComment = (postId, formData) => async dispatch => {\n  try {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify(formData);\n    const res = await axios.put('/api/post/', formData, config);\n  } catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n}; // Remove Comment \n\nexport const removeComment = () => async dispatch => {\n  try {} catch (err) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: err.response.statusText,\n        status: err.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Aamir/Desktop/porject/MernStack/client/src/actions.js/post.js"],"names":["axios","setAlert","GET_POST","ADD_POST","POST_ERROR","UPDATE_LIKES","DELETE_POST","GET_SINGLE_POST","ADD_COMMENT","REMOVE_COMMENT","getPost","dispatch","res","get","type","payload","data","err","msg","response","statusText","status","addLike","post_id","console","log","put","id","likes","removeLike","deletePost","delete","addPost","formData","config","headers","body","JSON","stringify","post","getSinglePost","addComment","postId","removeComment"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport {setAlert} from './alert'\r\nimport {\r\n    GET_POST,\r\n    ADD_POST,   \r\n    POST_ERROR,\r\n    UPDATE_LIKES,\r\n    DELETE_POST,\r\n    GET_SINGLE_POST,\r\n    ADD_COMMENT,\r\n    REMOVE_COMMENT\r\n} from './actions'\r\n\r\n\r\n// Get ALl post \r\nexport const getPost = () => async dispatch =>{\r\n    try {\r\n        const res = await axios.get('/api/posts')\r\n\r\n        dispatch({\r\n            type:GET_POST,\r\n           payload:res.data\r\n        })\r\n        \r\n    } catch (err) {\r\n        \r\n        dispatch({\r\n            type:POST_ERROR,\r\n            payload:{msg:err.response.statusText,status:err.response.status}\r\n        });\r\n    }\r\n}\r\n\r\n\r\n// Add Like \r\n\r\n\r\nexport const addLike = post_id => async dispatch => {\r\n    try {\r\n        console.log(post_id)\r\n        const res = await axios.put(`/api/posts/likes/${post_id}`)\r\n        dispatch({\r\n            type:UPDATE_LIKES,\r\n            payload:{id:post_id,likes:res.data}\r\n        })\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type:POST_ERROR,\r\n            payload:{msg:err.response.statusText,status:err.response.status}\r\n        });\r\n    }\r\n}\r\n\r\n\r\n// Remove Like \r\nexport const removeLike = post_id => async dispatch => {\r\n    try {\r\n        const res = await axios.put(`/api/posts/unlikes/${post_id}`)\r\n        dispatch({\r\n            type:UPDATE_LIKES,\r\n            payload:{id:post_id,likes:res.data}\r\n        })\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type:POST_ERROR,\r\n            payload:{msg:err.response.statusText,status:err.response.status}\r\n        });\r\n    }\r\n}\r\n\r\n\r\n// Delete Post \r\nexport const deletePost = post_id => async dispatch => {\r\n    try {\r\n        const res = await axios.delete(`/api/posts/${post_id}`)\r\n        dispatch({\r\n            type:DELETE_POST,\r\n            payload:{id:post_id}\r\n        })\r\n        dispatch(setAlert('Post removed','success'))\r\n    } catch (err) {\r\n        dispatch({\r\n            type:POST_ERROR,\r\n            payload:{msg:err.response.statusText,status:err.response.status}\r\n        });\r\n    }\r\n}\r\n\r\nexport const addPost = formData => async dispatch => {\r\n    try {\r\n        \r\n        const config = {\r\n            headers:{\r\n                'Content-Type' : 'application/json'\r\n            }\r\n        }\r\n\r\n        const body = JSON.stringify(formData)\r\n        const res = await axios.post(`/api/posts`,body,config)\r\n        dispatch({\r\n            type:ADD_POST,\r\n            payload:res.data\r\n        })\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type:POST_ERROR,\r\n            payload:{msg:err.response.statusText,status:err.response.status}\r\n        });\r\n    }\r\n}\r\n\r\n// GET SINGLE POST \r\nexport const getSinglePost = (id) => async dispatch =>{\r\n    try {\r\n        const res = await axios.get(`/api/posts/${id}`)\r\n\r\n        dispatch({\r\n            type:GET_SINGLE_POST,\r\n           payload:res.data\r\n        })\r\n        \r\n    } catch (err) {\r\n        \r\n        dispatch({\r\n            type:POST_ERROR,\r\n            payload:{msg:err.response.statusText,status:err.response.status}\r\n        });\r\n    }\r\n}\r\n\r\n// Add commend \r\n\r\nexport const addComment = (postId , formData) => async dispatch => {\r\n    try {\r\n        const config = {\r\n            headers : {\r\n                'Content-Type' : 'application/json'\r\n            }\r\n        }\r\n\r\n        const body = JSON.stringify(formData)\r\n        const res = await axios.put('/api/post/',formData,config)\r\n        \r\n    } catch (err) {\r\n        dispatch({\r\n            type:POST_ERROR,\r\n            payload:{msg:err.response.statusText,status:err.response.status}\r\n        });\r\n    }\r\n}\r\n\r\n// Remove Comment \r\n\r\nexport const removeComment = () => async dispatch => {\r\n    try {\r\n        \r\n    } catch (err) {\r\n        dispatch({\r\n            type:POST_ERROR,\r\n            payload:{msg:err.response.statusText,status:err.response.status}\r\n        });        \r\n    }    \r\n}\r\n"]},"metadata":{},"sourceType":"module"}